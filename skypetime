#!/usr/bin/env python
from __future__ import print_function, division

import sqlite3
import argparse
import os
import sys
from datetime import datetime
import time
import xml.etree.ElementTree as ET


DATE_FMT = '%Y-%m-%d'


def read_duration(s):
    """Parse `duration' value from "body_xml" string and return the number
    of seconds.
    """
    pos = s.find('<duration>')
    if pos == -1:
        return 0  # invalid input string
    s = s[pos + len('<duration>'):]
    pos = s.find('</duration>')
    assert pos != -1
    s = s[:pos]
    return int(s)


def time_split(nsec):
    """Given number of seconds, return a tuple (H, M, S), where
    H is the number of hours, M -- minutes, S -- seconds.

    Examples:
      time_split(                 23) == (0,  0, 23)
      time_split(         17*60 + 23) == (0, 17, 23)
      time_split(5*3600 + 17*60 + 23) == (5, 17, 23)
    """
    assert type(nsec) is int
    h = nsec // 3600
    m = nsec // 60 % 60
    s = nsec % 60
    return h, m, s

# assert time_split(23) == (0, 0, 23)
# assert time_split(1043) == (0, 17, 23)
# assert time_split(19043) == (5, 17, 23)


def local_skype_id():
    xml_file = os.path.join(os.path.expanduser('~'), 'Library',
                            'Application Support', 'Skype', 'shared.xml')
    root = ET.parse(xml_file).getroot()
    return root.find('Lib/Account/Default').text


def date_to_epoch(s):
    """Converts local time in DATE_FMT format to epoch time.

    See `DATE_FMT'.
    """
    try:
        return int(time.mktime(datetime.strptime(s, DATE_FMT).timetuple()))
    except ValueError:
        raise argparse.ArgumentTypeError(
            '{!r} is not a date in {!r} format'.format(s, DATE_FMT))


def main():
    p = argparse.ArgumentParser(
        description='Calculate duration of Skype conversations.')
    p.add_argument('skype_id', help='Skype identifier of the remote user')
    p.add_argument('--start', metavar='DATE', type=date_to_epoch,
                   help='Start date in {} format; see strftime(3)'.format(
                       DATE_FMT.replace('%', '%%')))
    p.add_argument('--days', metavar='N', type=int,
                   help='Number of days to take into account')
    args = p.parse_args()

    if args.skype_id == local_skype_id():
        print('Talking to yourself again, huh?', file=sys.stderr)
        return 1

    end = None
    if args.days:
        assert args.days > 0
        if not args.start:
            print("`--days' requires `--start'", file=sys.stderr)
            return 1
        end = args.start + args.days * 24*3600

    db_path = os.path.join(os.path.expanduser('~'), 'Library',
                           'Application Support', 'Skype', local_skype_id(),
                           'main.db')
    try:
        conn = sqlite3.connect(db_path)
    except sqlite3.OperationalError as e:
        print("{}: '{}'".format(e, db_path), file=sys.stderr)
        return 1
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    sql = """\
    SELECT body_xml FROM Messages
    WHERE chatname = '{skype_id}' AND chatmsg_type = 18
      AND body_xml LIKE '%type="ended"%'{start}{end}
    ORDER BY timestamp DESC""".format(
        skype_id=args.skype_id,
        start=('' if args.start is None else
               ' AND {} < timestamp'.format(args.start)),
        end=('' if end is None else ' AND timestamp < {}'.format(end)))
    cur.execute(sql)

    def _f(t):
        return read_duration(t[0])
    total_nsec = sum(map(_f, cur.fetchall()))
    print('{}:{:02}:{:02}'.format(*time_split(total_nsec)))

    conn.close()


if __name__ == '__main__':
    sys.exit(main())
